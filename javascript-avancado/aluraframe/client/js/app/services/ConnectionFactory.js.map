{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AACT,6CAAa;AAAA;;AACT,0BAAM,IAAIC,KAAJ,CAAU,gDAAV,CAAN;AACH;;;;oDAEqB;AAClB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,aAAK;AACzB,oCAAG,CAAChB,UAAJ,EAAe;AACXA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAU;AACzB,8CAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQQ,EAAEC,MAAF,CAASC,MAAjB;AACH,6BATD;;AAWAR,wCAAYW,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,KAAR,CAAcP,EAAEC,MAAF,CAASM,KAAvB;AACAd,uCAAOO,EAAEC,MAAF,CAASM,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAIH,yBAtBM,CAAP;AAuBH;;;sDACuB;AACpB,4BAAGrB,UAAH,EAAc;AACVC;AACAD,yCAAa,IAAb;AACH;AACJ;;;kDAEoBA,U,EAAW;AAC5BH,+BAAOyB,OAAP,CAAe,iBAAS;AACpB,gCAAGtB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EACIzB,WAAW0B,iBAAX,CAA6BD,KAA7B;;AAEJzB,uCAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAACG,eAAe,IAAhB,EAApC;AACH,yBALD;AAMH","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\nconst version = 4;\nconst dbName = 'aluraframe';\n\nlet connection = null;\nlet close = null;\n\nexport class ConnectionFactory{\n    constructor(){\n        throw new Error('Não é possível instâncias de ConnectionFactory');\n    }\n\n    static getConnection(){\n        return new Promise((resolve, reject) => {\n            let openRequest = window.indexedDB.open(dbName, version);\n\n            openRequest.onupgradeneeded = e => {\n                ConnectionFactory._createStores(e.target.result);\n            }\n\n            openRequest.onsuccess = e => {\n                if(!connection){\n                    connection = e.target.result;\n                    close = connection.close.bind(connection);\n                    connection.close = function(){ \n                        throw new Error('Não é possível fechar a conexão diretamente')\n                    }\n                }\n                resolve(e.target.result);\n            }\n\n            openRequest.onerror = e => {\n                console.error(e.target.error);\n                reject(e.target.error.name);                \n            }\n        });\n    }\n    static closeConnection(){\n        if(connection){\n            close();\n            connection = null;\n        }\n    }\n\n    static _createStores(connection){\n        stores.forEach(store => {\n            if(connection.objectStoreNames.contains(store))\n                connection.deleteObjectStore(store);\n\n            connection.createObjectStore(store, {autoIncrement: true});\n        })\n    }\n}\n"]}