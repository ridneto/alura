{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","res","ok","Error","statusText","url","fetch","then","_handleErrors","json","catch","err","dado","headers","method","body","JSON","stringify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAAaA,W;;;;;;;kDACKC,G,EAAI;AACd,4BAAG,CAACA,IAAIC,EAAR,EAAY,MAAM,IAAIC,KAAJ,CAAUF,IAAIG,UAAd,CAAN;;AAEZ,+BAAOH,GAAP;AACH;;;wCAEGI,G,EAAI;AAAA;;AACJ,+BAAOC,MAAMD,GAAN,EACFE,IADE,CACG;AAAA,mCAAO,MAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,yBADH,EAEFM,IAFE,CAEG;AAAA,mCAAON,IAAIQ,IAAJ,EAAP;AAAA,yBAFH,EAGFC,KAHE,CAGI,eAAO;AACV,kCAAM,IAAIP,KAAJ,CAAUQ,GAAV,CAAN;AACH,yBALE,CAAP;;AAOA;;;;;;;;;;;;;;;;;;AAkBH;;;yCAEIN,G,EAAKO,I,EAAK;AAAA;;AACX,+BAAON,MAAMD,GAAN,EAAW;AACdQ,qCAAS,EAAC,gBAAgB,kBAAjB,EADK;AAEdC,oCAAQ,MAFM;AAGdC,kCAAMC,KAAKC,SAAL,CAAeL,IAAf;AAHQ,yBAAX,EAKNL,IALM,CAKD;AAAA,mCAAO,OAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,yBALC,CAAP;;AAOA;;;;;;;;;;;;;;;;;AAoBH","file":"HttpService.js","sourcesContent":["export class HttpService{\n    _handleErrors(res){\n        if(!res.ok) throw new Error(res.statusText);\n\n        return res;\n    }\n    \n    get(url){\n        return fetch(url)\n            .then(res => this._handleErrors(res))    \n            .then(res => res.json())\n            .catch(err => {\n                throw new Error(err)\n            });\n\n        /*return new Promise((resolve, reject) => {\n            let xhr = new XMLHttpRequest();\n        \n            xhr.open('GET', url);\n        \n            xhr.onreadystatechange = () => {\n                if(xhr.readyState == 4){\n                    if( xhr.status == 200){\n                        resolve(JSON.parse(xhr.responseText));\n                    }else{\n                        reject(xhr.responseText);\n                    }\n                } \n            };\n        \n            xhr.send();\n        });\n        */\n    }\n\n    post(url, dado){\n        return fetch(url, {\n            headers: {'Content-type': \"application/json\"},\n            method: 'post',\n            body: JSON.stringify(dado)\n        })\n        .then(res => this._handleErrors(res));\n\n        /*\n        return new Promise((resolve, reject) => {\n            let xhr = new XMLDocument();\n\n            xhr.open(\"POST\", url, true);\n            xhr.setRequestHeader(\"Content-type\", \"application/json\")\n\n            xhr.onreadystatechange = () => {\n                if(xhr.sreadyState == 4){\n                    console.log('4')\n                    resolve(JSON.parse(xhr.responseText));\n                }else{\n                    console.log('not 4')\n                    reject(xhr.responseText);\n                }\n            }\n\n            xhr.send(JSON.stringify(dado));\n        });\n        */\n    }\n}"]}